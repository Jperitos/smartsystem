<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Bin Data Dashboard</title>
  <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      background-color: #f5f5f5;
    }
    
    .dashboard-container {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      max-width: 1400px;
      margin-left: auto;
      margin-right: auto;
    }
    
    .left-panel {
      flex: 2;
      background: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      min-width: 0; /* Prevent flex item from overflowing */
    }
    
    .right-panel {
      flex: 1;
      background: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      min-width: 300px; /* Ensure minimum width for status panel */
      max-width: 400px; /* Prevent it from getting too wide */
    }

    .floor-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .floor-header h2 {
      margin: 0;
      color: #333;
    }

    .floor-dropdown {
      padding: 8px 12px;
      border: 1px solid #ddd;
      border-radius: 5px;
      background: white;
      font-size: 14px;
    }

    .floor-image-container {
      text-align: center;
      margin-bottom: 20px;
    }

    .floor-image {
      max-width: 100%;
      height: auto;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      background-color: #f8f9fa;
      min-height: 300px;
      display: block;
    }

    .status-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }

    .status-header h3 {
      margin: 0;
      color: #333;
    }

    .bin-status-container {
      background: #f9f9f9;
      border-radius: 8px;
      padding: 15px;
    }

    .bin-status-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 12px 0;
      border-bottom: 1px solid #eee;
    }

    .bin-status-item:last-child {
      border-bottom: none;
    }

    .bin-name {
      font-weight: 500;
      color: #333;
    }

    .bin-percentage {
      font-weight: bold;
      padding: 4px 8px;
      border-radius: 4px;
      color: white;
      min-width: 45px;
      text-align: center;
    }

    .bin-percentage.low {
      background-color: #28a745;
    }

    .bin-percentage.medium {
      background-color: #ffc107;
      color: #333;
    }

    .bin-percentage.high {
      background-color: #dc3545;
    }

    .progress-bar-container {
      width: 100%;
      height: 6px;
      background: #ddd;
      border-radius: 3px;
      margin-top: 8px;
      overflow: hidden;
    }

    .progress-bar {
      height: 100%;
      transition: width 0.3s ease;
      border-radius: 3px;
    }

    .progress-green {
      background-color: #28a745;
    }

    .progress-yellow {
      background-color: #ffc107;
    }

    .progress-red {
      background-color: #dc3545;
    }

    table {
      border-collapse: collapse;
      width: 100%;
      margin-top: 20px;
      background: white;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      max-width: 1400px;
      margin-left: auto;
      margin-right: auto;
    }
    
    th, td {
      border: 1px solid #ddd;
      padding: 12px;
      text-align: center;
    }
    
    th {
      background-color: #f8f9fa;
      font-weight: 600;
      color: #333;
    }
    
    .notification {
      background-color: #f0f8ff;
      padding: 10px;
      margin-bottom: 10px;
      border-left: 4px solid #007bff;
      font-size: 14px;
      border-radius: 4px;
    }

    #notification-container {
      background: white;
      border-radius: 10px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      max-width: 1400px;
      margin-left: auto;
      margin-right: auto;
    }

    #notification-container h3 {
      margin-top: 0;
      color: #333;
    }

    #notifications-list {
      max-height: 300px;
      overflow-y: auto;
    }

    /* Responsive design */
    @media (max-width: 768px) {
      .dashboard-container {
        flex-direction: column;
      }
      
      .right-panel {
        min-width: auto;
        max-width: none;
      }
      
      body {
        padding: 10px;
      }
    }
  </style>
</head>
<body>

  <div class="dashboard-container">
    <!-- Floor Plan Panel -->
    <div class="left-panel">
      <div class="floor-header">
        <h2 id="floorTitle">Floor 1</h2>
        <select id="floorSelect" class="floor-dropdown">
          <option value="1">Floor 1</option>
          <option value="2">Floor 2</option>
          <option value="3">Floor 3</option>
          <option value="4">Floor 4</option>
          <option value="5">Floor 5</option>
          <option value="6">Floor 6</option>
        </select>
      </div>
      <div class="floor-image-container">
        <img id="floorImage" src="/image/Floor%20Plan%201.png" alt="Floor Plan" class="floor-image" 
             onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
        <div style="display: none; padding: 40px; background: #f8f9fa; border-radius: 8px; color: #666; text-align: center;">
          Floor Plan Image Not Available
        </div>
      </div>
    </div>

    <!-- Status Panel -->
    <div class="right-panel">
      <div class="status-header">
        <h3>Status</h3>
      </div>
      <div class="bin-status-container">
        <div class="bin-status-item">
          <span class="bin-name">SIBin1</span>
          <span class="bin-percentage medium" id="sibin1-percentage">78%</span>
        </div>
        <div class="progress-bar-container">
          <div class="progress-bar progress-yellow" id="sibin1-progress" style="width: 78%;"></div>
        </div>

        <div class="bin-status-item">
          <span class="bin-name">SIBin2</span>
          <span class="bin-percentage low" id="sibin2-percentage">32%</span>
        </div>
        <div class="progress-bar-container">
          <div class="progress-bar progress-green" id="sibin2-progress" style="width: 32%;"></div>
        </div>

        <div class="bin-status-item">
          <span class="bin-name">SIBin3</span>
          <span class="bin-percentage high" id="sibin3-percentage">100%</span>
        </div>
        <div class="progress-bar-container">
          <div class="progress-bar progress-red" id="sibin3-progress" style="width: 100%;"></div>
        </div>
      </div>
    </div>
  </div>

  <div id="notification-container">
    <h3>Real-Time Notifications</h3>
    <div id="notifications-list"></div>
  </div>

  <h1>Bin Data (Fill Level â‰¥ 85%)</h1>
  <table id="binTable">
    <thead>
      <tr>
        <th>Data ID</th>
        <th>Timestamp</th>
        <th>Height (cm)</th>
        <th>Weight (kg)</th>
        <th>Type</th>
        <th>Fill Level (%)</th>
        <th>Full Bin Time</th>
      </tr>
    </thead>
    <tbody>
      <!-- Data rows go here -->
    </tbody>
  </table>

  <script src="https://cdn.socket.io/4.6.1/socket.io.min.js"></script>

  <script>
    // Floor selection functionality
    const floorSelect = document.getElementById('floorSelect');
    const floorImage = document.getElementById('floorImage');
    const floorTitle = document.getElementById('floorTitle');

    floorSelect.addEventListener('change', function () {
      const selectedFloor = this.value;
      // Properly encode the URL to handle spaces in filename
      floorImage.src = `/image/Floor%20Plan%20${selectedFloor}.png`;
      floorTitle.textContent = `Floor ${selectedFloor}`;
      
      // Reset image display in case it was hidden due to error
      floorImage.style.display = 'block';
      floorImage.nextElementSibling.style.display = 'none';
      
      // Update bin names based on floor
      updateBinNames(selectedFloor);
    });

    function updateBinNames(floor) {
      const binNames = document.querySelectorAll('.bin-name');
      binNames.forEach((binName, index) => {
        const binNumber = index + 1;
        binName.textContent = `S${floor}Bin${binNumber}`;
      });
    }

    function updateBinStatus(binId, percentage) {
      const percentageElement = document.getElementById(`${binId}-percentage`);
      const progressElement = document.getElementById(`${binId}-progress`);
      
      if (percentageElement && progressElement) {
        percentageElement.textContent = `${percentage}%`;
        progressElement.style.width = `${percentage}%`;
        
        // Update color classes based on percentage
        percentageElement.className = 'bin-percentage';
        progressElement.className = 'progress-bar';
        
        if (percentage < 50) {
          percentageElement.classList.add('low');
          progressElement.classList.add('progress-green');
        } else if (percentage < 85) {
          percentageElement.classList.add('medium');
          progressElement.classList.add('progress-yellow');
        } else {
          percentageElement.classList.add('high');
          progressElement.classList.add('progress-red');
        }
      }
    }

    async function fetchBinData() {
      try {
        const response = await fetch('/api/bin-data');
        const data = await response.json();

        const tbody = document.querySelector('#binTable tbody');
        tbody.innerHTML = ''; // Clear existing rows

        data.forEach(item => {
          const row = document.createElement('tr');

          row.innerHTML = `
            <td>${item.data_id}</td>
            <td>${new Date(item.timestamp).toLocaleString()}</td>
            <td>${item.height ?? ''}</td>
            <td>${item.weight ?? ''}</td>
            <td>${item.type}</td>
            <td>${item.fillLevel.toFixed(1)}</td>
            <td>${item.fullbin_time ? new Date(item.fullbin_time).toLocaleString() : ''}</td>
          `;

          tbody.appendChild(row);
        });

        // Update bin status based on latest data
        if (data.length > 0) {
          // Example: Update status based on first few entries
          // You may want to modify this logic based on your actual data structure
          const latestData = data.slice(0, 3);
          latestData.forEach((item, index) => {
            const binId = `sibin${index + 1}`;
            updateBinStatus(binId, Math.round(item.fillLevel));
          });
        }

      } catch (err) {
        console.error('Error fetching bin data:', err);
      }
    }

    // Fetch data on page load and every 30 seconds
    fetchBinData();
    setInterval(fetchBinData, 30000);

    // Notifications logic
    const notifContainer = document.getElementById('notifications-list');

    async function fetchNotifications() {
      try {
        const res = await fetch('/api/notifications');
        if (!res.ok) throw new Error('Failed to fetch notifications');
        const notifications = await res.json();

        if (notifications.length === 0) {
          notifContainer.innerHTML = '<p>No notifications</p>';
          return;
        }

        notifContainer.innerHTML = notifications.map(notif => `
          <div class="notification">
            <strong>${notif.notif_type}</strong><br>
            <small>${new Date(notif.created_at).toLocaleString()}</small>
            <p>${notif.message}</p>
            <small><em>Bin: ${notif.bin_id?.bin_code || 'Unknown'}</em></small>
          </div>
        `).join('');
      } catch (error) {
        notifContainer.innerHTML = `<p style="color:red;">Failed to load notifications</p>`;
        console.error('Error fetching notifications:', error);
      }
    }

    // Initial load
    fetchNotifications();

    // Socket.io connection and realtime updates
    const socket = io();

    socket.on('connect', () => {
      console.log('Connected to notification server');
    });

    socket.on('pushNotification', (data) => {
      console.log('Notification received:', data);

      const notifElement = document.createElement('div');
      notifElement.classList.add('notification');
      notifElement.innerHTML = `
        <strong>${data.notif_type || 'Notification'}</strong><br>
        <small>${new Date(data.created_at || Date.now()).toLocaleString()}</small>
        <p>${data.message}</p>
        <small><em>Bin: ${data.bin_code || 'Unknown'}</em></small>
      `;

      notifContainer.prepend(notifElement);
    });

    socket.on('disconnect', () => {
      console.log('Disconnected from notification server');
    });

    // Test if image loads correctly on page load
    window.addEventListener('load', function() {
      console.log('Page loaded, testing image path:', floorImage.src);
    });
  </script>

</body>
</html>
