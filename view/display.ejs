<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Bin Data Dashboard</title>
  <style>
    table {
      border-collapse: collapse;
      width: 100%;
      margin-top: 20px;
    }
    th, td {
      border: 1px solid #aaa;
      padding: 8px 12px;
      text-align: center;
    }
    th {
      background-color: #eee;
    }
    .notification {
      background-color: #f0f8ff;
      padding: 10px;
      margin-bottom: 10px;
      border-left: 4px solid #007bff;
      font-size: 14px;
      font-family: Arial, sans-serif;
    }
  </style>
</head>
<body>

  <div id="notification-container" style="padding: 1rem; max-height: 300px; overflow-y: auto; border: 1px solid #ccc; width: 300px;">
    <h3>Real-Time Notifications</h3>
    <div id="notifications-list"></div>
  </div>

  <h1>Bin Data (Fill Level â‰¥ 85%)</h1>
  <table id="binTable">
    <thead>
      <tr>
        <th>Data ID</th>
        <th>Timestamp</th>
        <th>Height (cm)</th>
        <th>Weight (kg)</th>
        <th>Type</th>
        <th>Fill Level (%)</th>
        <th>Full Bin Time</th>
      </tr>
    </thead>
    <tbody>
      <!-- Data rows go here -->
    </tbody>
  </table>

  <script src="https://cdn.socket.io/4.6.1/socket.io.min.js"></script>

  <script>
    async function fetchBinData() {
      try {
        const response = await fetch('/api/bin-data');
        const data = await response.json();

        const tbody = document.querySelector('#binTable tbody');
        tbody.innerHTML = ''; // Clear existing rows

        data.forEach(item => {
          const row = document.createElement('tr');

          row.innerHTML = `
            <td>${item.data_id}</td>
            <td>${new Date(item.timestamp).toLocaleString()}</td>
            <td>${item.height ?? ''}</td>
            <td>${item.weight ?? ''}</td>
            <td>${item.type}</td>
            <td>${item.fillLevel.toFixed(1)}</td>
            <td>${item.fullbin_time ? new Date(item.fullbin_time).toLocaleString() : ''}</td>
          `;

          tbody.appendChild(row);
        });

      } catch (err) {
        console.error('Error fetching bin data:', err);
      }
    }

    // Fetch data on page load and every 30 seconds
    fetchBinData();
    setInterval(fetchBinData, 30000);

    // Notifications logic
    const notifContainer = document.getElementById('notifications-list');

    async function fetchNotifications() {
      try {
        const res = await fetch('/api/notifications');
        if (!res.ok) throw new Error('Failed to fetch notifications');
        const notifications = await res.json();

        if (notifications.length === 0) {
          notifContainer.innerHTML = '<p>No notifications</p>';
          return;
        }

        notifContainer.innerHTML = notifications.map(notif => `
          <div class="notification">
            <strong>${notif.notif_type}</strong><br>
            <small>${new Date(notif.created_at).toLocaleString()}</small>
            <p>${notif.message}</p>
            <small><em>Bin: ${notif.bin_id?.bin_code || 'Unknown'}</em></small>
          </div>
        `).join('');
      } catch (error) {
        notifContainer.innerHTML = `<p style="color:red;">Failed to load notifications</p>`;
        console.error('Error fetching notifications:', error);
      }
    }

    // Initial load
    fetchNotifications();

    // Socket.io connection and realtime updates
    const socket = io();

    socket.on('connect', () => {
      console.log('Connected to notification server');
    });

    socket.on('pushNotification', (data) => {
      console.log('Notification received:', data);

      const notifElement = document.createElement('div');
      notifElement.classList.add('notification');
      notifElement.innerHTML = `
        <strong>${data.notif_type || 'Notification'}</strong><br>
        <small>${new Date(data.created_at || Date.now()).toLocaleString()}</small>
        <p>${data.message}</p>
        <small><em>Bin: ${data.bin_code || 'Unknown'}</em></small>
      `;

      notifContainer.prepend(notifElement);
    });

    socket.on('disconnect', () => {
      console.log('Disconnected from notification server');
    });
  </script>

</body>
</html>
